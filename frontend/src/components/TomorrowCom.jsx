import React, { useEffect, useState } from "react";
import {
  getFormattedTomorrowYYYYMMDD,
  getFormattedTomorrowYYMMDD,
} from "./DateUtils";
import axios from "axios";
import "../css/TodayCom.css";

const TomorrowCom = () => {
  const API_URL = process.env.REACT_APP_API_URL;
  const [todoDetailsTomorrow, setTodoDetailsTomorrow] = useState([]); //ÎÇ¥Ïùº todolist Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞Í∏∞
  const [memo, setMemo] = useState(""); //Î©îÎ™® fetch
  const [isEditingMemo, setIsEditingMemo] = useState(false);
  const [newMemo, setNewMemo] = useState("");
  const [isAdding, setIsAdding] = useState(false); //todolist Ï∂îÍ∞Ä
  const [newTask, setNewTask] = useState({ tdDetail: "", tdDetailTime: "" }); //todolist Ï∂îÍ∞ÄÍ∞Ä
  const [dropdownOpen, setDropdownOpen] = useState(null);
  const [tomorrowTdId, setTomorrowTdId] = useState(null);
  const [editItem, setEditItem] = useState(null);
  const formatTime = (time) => {
    const strTime = time.toString();
    const hour = strTime.slice(0, -2);
    const minute = strTime.slice(-2);

    return `${hour}:${minute}`;
  };

  useEffect(() => {
    //checklist Î∂àÎü¨Ïò§Îäî Ìï®Ïàò -> ÏÑ∏ÏÖòÏó∞Í≤∞ ÏÑ±Í≥µ, ÌÖåÏä§Ìä∏ÏôÑÎ£å
    const fetchTodoDetails = async () => {
      try {
        const response = await axios.get(
          `${API_URL}/todolist/getTodo/${getFormattedTomorrowYYMMDD()}`,
          {
            withCredentials: true,
          }
        );
        if (Array.isArray(response.data)) {
          setTodoDetailsTomorrow(response.data);
          setTomorrowTdId(response.data[0].tdId);
        } else {
          console.error("Ïò§ÎäòÏùò Îç∞Ïù¥ÌÑ∞ ÏóêÎü¨", response.data);
        }
      } catch (error) {
        console.error("Ïò§ÎäòÏùò Îç∞Ïù¥ÌÑ∞ fetch ÏóêÎü¨", error);
      }
    };

    //memo Î∂àÎü¨Ïò§Îäî Ìï®Ïàò -> ÏÑ∏ÏÖòÏó∞Í≤∞ ÏÑ±Í≥µ, ÌÖåÏä§Ìä∏ÏôÑÎ£å
    const fetchMemo = async () => {
      try {
        const response = await axios.get(
          `${API_URL}/todolist/getMemo/${getFormattedTomorrowYYMMDD()}`,
          {
            withCredentials: true,
          }
        );
        console.log(response.data);
        if (Array.isArray(response.data) && response.data.length > 0) {
          setMemo(response.data[0].tdMemo); // Î∞∞Ïó¥ÏóêÏÑú tdMemoÎßå Ï∂îÏ∂úÌïòÏó¨ ÏÑ§Ï†ï
        } else {
          console.error("Î©îÎ™® Îç∞Ïù¥ÌÑ∞ ÌòïÏãù Ïò§Î•ò", response.data);
        }
      } catch (error) {
        console.error("Î©îÎ™® Îç∞Ïù¥ÌÑ∞ fetch ÏóêÎü¨", error);
      }
    };

    fetchTodoDetails();
    fetchMemo();
  }, []);

  //todolist Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉÅÌÉú Î≥ÄÍ≤Ω Ìï®Ïàò
  const handleCheckboxChange = async (id) => {
    const updatedTodoDetails = todoDetailsTomorrow.map((item) =>
      item.tdDetailId === id
        ? { ...item, tdDetailState: !item.tdDetailState } //falseÏù∏ Í≤ΩÏö∞ trueÎ°ú Î∞îÍøà
        : item
    );

    setTodoDetailsTomorrow(updatedTodoDetails);

    //Î≥ÄÍ≤ΩÎêú ÏÉÅÌÉúÎ•º Ï†ÄÏû•Ìïú ÌõÑ api ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
    const changedItem = updatedTodoDetails.find(
      (item) => item.tdDetailId === id
    );

    try {
      await axios.put("${API_URL}/todolist/state", {
        tdDetailId: changedItem.tdDetailId,
        tdId: changedItem.tdId,
        tdDetail: changedItem.tdDetail,
        tdDetailTime: changedItem.tdDetailTime,
        tdDetailState: changedItem.tdDetailState, // Î∞òÏ†ÑÎêú ÏÉÅÌÉúÍ∞íÏùÑ Ï†ÄÏû•ÏãúÏºúÏÑú Ï†ÑÏÜ°ÏÜ°
      });
    } catch (error) {
      console.error("Ï≤¥ÌÅ¨Î∞ïÏä§ Ï≤òÎ¶¨ Ïò§Î•ò:", error);
    }
  };

  const handleEditClick = (item) => {
    setEditItem(item);
  };

  // ÏàòÏ†ïÎêú ÎÇ¥Ïö© ÏÑúÎ≤ÑÏóê Ï†ÄÏû•
  const handleSaveEdit = async (item) => {
    const requestData = {
      tdDetailId: editItem.tdDetailId,
      tdDetail: editItem.tdDetail,
      tdDetailState: editItem.tdDetailState,
      tdDetailTime: editItem.tdDetailTime,
      tdId: editItem.tdId,
    };
    try {
      const response = await axios.put(
        `${API_URL}/todolist/modify`,
        requestData,
        { withCredentials: true }
      );
      console.log("ÏàòÏ†ï ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞: ", requestData);
      setTodoDetailsTomorrow((prev) =>
        prev.map((todo) =>
          todo.tdDetailId === response.data.tdDetailId
            ? { ...todo, ...response.data }
            : todo
        )
      );
    } catch (error) {
      console.error("TD ÏàòÏ†ï Ïã§Ìå®", error);
    }
  };

  // ÏàòÏ†ï Ï∑®ÏÜå
  const handleCancelEdit = () => {
    setEditItem(null); // ÏàòÏ†ï Î™®Îìú Ï¢ÖÎ£å
  };

  //todolist ÏÇ≠Ï†ú Ìï®Ïàò -> ÏÑ∏ÏÖòÏó∞Í≤∞ ÏÑ±Í≥µ, ÌÖåÏä§Ìä∏ ÏôÑÎ£å
  const handleDeleteClick = (id) => {
    axios
      .delete(`${API_URL}/todolist/del`, {
        data: { tdDetailId: id },
        withCredentials: true,
      })
      .then(() => {
        setTodoDetailsTomorrow((prev) =>
          prev.filter((item) => item.tdDetailId !== id)
        );
      })
      .catch((error) => {
        console.error("ÏÇ≠Ï†ú Ïã§Ìå®:", error);
      });
  };

  const handleAddTask = async () => {
    if (!newTask.tdDetail.trim() || !newTask.tdDetailTime.trim()) {
      console.error("Ìï† ÏùºÍ≥º Î™©Ìëú ÏãúÍ∞ÑÏùÑ ÏûÖÎ†•Ìï¥Ïïº Ìï©ÎãàÎã§.");
      return;
    }

    const newTaskData = {
      tdDetail: newTask.tdDetail,
      tdDetailTime: newTask.tdDetailTime,
    };

    try {
      const response = await axios.post(
        `${API_URL}/todolist/write/${getFormattedTomorrowYYMMDD()}`,
        newTaskData,
        { withCredentials: true }
      );

      console.log("ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ ÏùëÎãµ:", response.data);
      if (response.data && response.data.tdDetailId) {
        // ÏÑúÎ≤Ñ ÏùëÎãµÏùÑ Í∏∞Î∞òÏúºÎ°ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setTodoDetailsTomorrow((prev) => [...prev, response.data]);
      } else {
        console.error("ÏÑúÎ≤Ñ ÏùëÎãµÏóê tdDetailIdÍ∞Ä ÏóÜÏäµÎãàÎã§:", response.data);
      }

      setNewTask({ tdDetail: "", tdDetailTime: "" });
      setIsAdding(false);
    } catch (error) {
      console.error("Ï∂îÍ∞Ä Ïã§Ìå®:", error);
    }
  };

  const toggleDropdown = (id) => {
    setDropdownOpen(dropdownOpen === id ? null : id);
  };

  //memo ÏàòÏ†ï Ìï®Ïàò
  const handleSaveMemo = async () => {
    if (tomorrowTdId === null) {
      console.error("tdIdÎ•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§");
      return;
    }

    const requestData = {
      tdId: tomorrowTdId,
      tdMemo: newMemo,
    };

    console.log("Ï†ÑÏÜ°ÌïòÎäî Îç∞Ïù¥ÌÑ∞:", requestData);

    try {
      await axios.put("${API_URL}/todolist/memoWrite", {
        tdId: tomorrowTdId,
        tdMemo: newMemo,
      });
      setMemo(newMemo);
      setIsEditingMemo(false);
    } catch (error) {
      console.error("Î©îÎ™® ÏàòÏ†ï Ïã§Ìå®: ", error);
    }
  };

  return (
    <div className="todolist">
      <div className="todolist_index">Tomorrow</div>
      <div className="todolist_content">
        <h2 className="todolist_date">{getFormattedTomorrowYYYYMMDD()}</h2>
        <table className="todolist_checkbox">
          <tbody>
            {todoDetailsTomorrow.map((item) => (
              <tr key={item.tdDetailId}>
                <td>
                  <div className="custom_checkbox">
                    <input
                      type="checkbox"
                      id={`checkbox-${item.tdDetailId}`}
                      checked={item.tdDetailState}
                      onChange={() => handleCheckboxChange(item.tdDetailId)}
                    />
                    <label htmlFor={`checkbox-${item.tdDetailId}`}>
                      <span className="checkmark"></span>
                    </label>
                  </div>
                </td>
                <td>
                  {editItem && editItem.tdDetailId === item.tdDetailId ? (
                    <input
                      type="text"
                      value={editItem.tdDetail}
                      onChange={(e) =>
                        setEditItem({ ...editItem, tdDetail: e.target.value })
                      }
                    />
                  ) : (
                    item.tdDetail
                  )}
                </td>
                <td>
                  {editItem && editItem.tdDetailId === item.tdDetailId ? (
                    <input
                      type="text"
                      value={editItem.tdDetailTime}
                      onChange={(e) =>
                        setEditItem({
                          ...editItem,
                          tdDetailTime: e.target.value,
                        })
                      }
                    />
                  ) : (
                    formatTime(item.tdDetailTime)
                  )}
                </td>
                <td>
                  <span onClick={() => toggleDropdown(item.tdDetailId)}>üñâ</span>
                  {dropdownOpen === item.tdDetailId && (
                    <div className="dropdown-menu">
                      <button onClick={() => handleEditClick(item)}>
                        ÏàòÏ†ï
                      </button>
                      <button
                        onClick={() => handleDeleteClick(item.tdDetailId)}
                      >
                        ÏÇ≠Ï†ú
                      </button>
                      <button onClick={() => toggleDropdown(null)}>Îã´Í∏∞</button>
                    </div>
                  )}
                </td>
              </tr>
            ))}
            <tr>
              <td colSpan="4">
                {isAdding ? (
                  <div>
                    <input
                      type="text"
                      placeholder="Ìï† Ïùº ÏûÖÎ†•"
                      value={newTask.tdDetail}
                      onChange={(e) =>
                        setNewTask({ ...newTask, tdDetail: e.target.value })
                      }
                    />
                    <input
                      type="text"
                      placeholder="Î™©Ìëú ÏãúÍ∞Ñ"
                      value={newTask.tdDetailTime}
                      onChange={(e) =>
                        setNewTask({ ...newTask, tdDetailTime: e.target.value })
                      }
                    />
                    <button onClick={handleAddTask}>ÏôÑÎ£å</button>
                  </div>
                ) : (
                  <button
                    className="add_tdDetail"
                    onClick={() => setIsAdding(true)}
                  >
                    <div className="plus_btn">+</div>
                  </button>
                )}
              </td>
            </tr>
          </tbody>
        </table>

        {editItem && (
          <div>
            <button onClick={handleSaveEdit}>ÏàòÏ†ï Ï†ÄÏû•</button>
            <button onClick={handleCancelEdit}>Ï∑®ÏÜå</button>
          </div>
        )}

        <div className="todolist_memo">
          <h3>Memo</h3>
          {isEditingMemo ? (
            <div>
              <textarea
                value={newMemo}
                onChange={(e) => setNewMemo(e.target.value)}
                className="tdMemo_textarea"
              />
              <div className="tdMemo_btn_wrapper">
                <button onClick={handleSaveMemo}>Ï†ÄÏû•</button>
                <button onClick={() => setIsEditingMemo(false)}>Ï∑®ÏÜå</button>
              </div>
            </div>
          ) : (
            <div
              onClick={() => {
                setIsEditingMemo(true);
                setNewMemo(memo);
              }}
              className="memomemo"
            >
              {memo}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TomorrowCom;
